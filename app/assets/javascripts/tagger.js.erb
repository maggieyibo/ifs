/**
 * Responsible for the gettig and setting of tags and tag weights
 *
 * @constructor
 */
function Tagger () {
  _this = this;

  var svgWidth = 400,
      svgHeight = 54;

  var sliderX = 40, 
      sliderY = 24,
      sliderW = 300,
      sliderH = 4;

  var thumbW = 8,
      thumbH = 20;

  var labelX = 10,
      labelY = 9;

  // The tags that have been set by the user
  this.tags = [];

  this.addTag = function(tag) {
    
    // only allow n tags
    var allowedTags = 9;
    if ( this.tags.length >= allowedTags ) {
      alert("Sorry, you can only search on " + allowedTags + " tags.");
      return;
    }

    // check if tag is already in list
    for (i=0;i<this.tags.length;i++) {
      if (tag.id === this.tags[i].id) {
        alert("You get to search on each tag only once.");
        return;
      }
    }

    var tag = {
      id: tag.id,
      name: tag.name,
      x: sliderX + sliderW / 2,
      y: sliderY - thumbH / 2 + sliderH / 2,
      weight: 50
    };

    this.tags.push(tag);

    var drag = d3.behavior.drag()
        .origin(function(d) { return d; })
        .on("drag", dragmove);

    var svg = d3.select('#tagger-div').selectAll('svg')
        .data(this.tags)
      .enter().append("svg")
        .attr('class', 'tagger-svg')
        .attr("width", svgWidth)
        .attr("height", svgHeight);

    // bar
    svg.append('rect')
          .attr('class', 'tagger-slider-bar')
          .attr("width", sliderW)
          .attr("height", sliderH)
          .attr('transform', 'translate(' + sliderX + ', ' + sliderY + ')');

    // thumb
    svg.append('rect')
          .attr('class', 'tagger-slider-thumb')
          .attr('width', thumbW)
          .attr('height', thumbH)
          .attr('cursor', 'pointer')
          .attr('x', function(d) { return d.x; })
          .attr('y', function(d) { return d.y; })
          .call(drag);

    // tag label
    svg.append('text')
          .text(tag.name)
          .attr('class', 'tagger-slider-label')
          .attr('transform', 'translate(' + labelX + ', ' + labelY + ')');

    // slider labels
    svg.append('text')
          .text('0')
          .attr('class', 'tagger-slider-num')
          .attr('transform', 'translate(' + (sliderX - 14) + ', ' + (sliderY + 7)+ ')');

    svg.append('text')
          .text('100')
          .attr('class', 'tagger-slider-num')
          .attr('transform', 'translate(' + (sliderX + sliderW + 3) + ', ' + (sliderY + 7)+ ')');

    var thumbTxt = svg.append('text')
          .text('50')
          .attr('class', 'tagger-slider-num')
          .attr('transform', 'translate(' + (sliderX + sliderW / 2 - 5) + ', ' + (sliderY + sliderH + thumbH + 4)+ ')');

    piechart.updateTagList();

    function dragmove(d) {
      var x = Math.max(sliderX, Math.min(sliderX + sliderW - thumbW, d3.event.x));
      
      // move the thumb
      d3.select(this)
          .attr('x', d.x = x);

      // get the moving text's current Y
      var tY = d3.transform(thumbTxt.attr("transform")).translate[1];

      // calculate the weight
      tagWeight = Math.round( (x-sliderX) / (sliderW - thumbW) * 100 );
      thumbTxt
          .attr('transform', 'translate(' + (x - 5) + ', ' + tY + ')')
          .text( tagWeight );

      tag.weight = tagWeight;
      piechart.updateVals();

    }
  };
}