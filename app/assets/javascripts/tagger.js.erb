/**
 * Responsible for the gettig and setting of tags and tag weights
 *
 * @constructor
 */
function Tagger () {
  _this = this;

  var width = 240,
    height = 60,
    radius = 20;

  var sliderX = 20, 
      sliderY = 34,
      sliderW = 200,
      sliderH = 4;

  var thumbW = 8,
      thumbH = 20;

  // The tags that have been set by the user
  this.curr_tags = [];

  this.addTag = function(tag) {
    
    this.curr_tags.push({
      id: tag.id,
      name: tag.name,
      x: width / 2,
      y: sliderY - thumbH / 2 + sliderH / 2
    });

    var drag = d3.behavior.drag()
        .origin(function(d) { return d; })
        .on("drag", dragmove);

    var svg = d3.select('#tagger-div').selectAll('svg')
        .data(this.curr_tags)
      .enter().append("svg")
        .attr("width", width)
        .attr("height", height);

    // bar
    svg.append('rect')
          .attr('class', 'tagger-slider-bar')
          .attr("width", sliderW)
          .attr("height", sliderH)
          .attr('transform', 'translate(' + sliderX + ', ' + sliderY + ')');

    // thumb
    svg.append('rect')
          .attr('class', 'tagger-slider-thumb')
          .attr('width', thumbW)
          .attr('height', thumbH)
          .attr('x', function(d) { return d.x; })
          .attr('y', function(d) { return d.y; })
          .call(drag);

    // tag label
    svg.append('text')
          .text(tag.name)
          .attr('class', 'tagger-slider-label')
          .attr('transform', 'translate(10, 18)')
          .attr('font-family', 'sans-serif')
          .attr('font-size', '14px')
          .attr('fill', '#ffcc99');

    function dragmove(d) {
      d3.select(this)
          // .attr("x", d.x = d3.event.x);
          .attr("x", d.x = Math.max(sliderX, Math.min(sliderX + sliderW, d3.event.x)) - thumbW/2);   
    }
  };
}