/**
 * Responsible for the gettig and setting of tags and tag weights
 *
 * @constructor
 */
function Tagger () {
  var _this = this;

  var svgWidth = 400,
      svgHeight = 54;

  var sliderX = 40,
      sliderY = 24,
      sliderW = 300,
      sliderH = 4;

  var thumbW = 8,
      thumbH = 20;

  var labelX = 10,
      labelY = 9;

  var delX = 14,
      delY = sliderY + sliderH/2,
      delR = 6;

  var maxTags = 9;

  var leftX = sliderX + thumbW/2;
  var rightX = sliderX + sliderW - thumbW/2;

  // The tags that have been set by the user
  this.tags = [];

  /**
   * Called whenever the number of tags changes
   */
  this.updateTags = function() {

    // clear all existing
    d3.select('#tagger-div').html('');

    // create the d3 drag behavior
    var drag = d3.behavior.drag()
        .origin(function(d) { return d; })
        .on("drag", dragmove);

    // create the svg
    var svg = d3.select('#tagger-div').selectAll('svg')
        .data(_this.tags)
      .enter().append("svg")
        .attr('class', 'tagger-svg')
        .attr("width", svgWidth)
        .attr("height", svgHeight);

    // create the delet button
    svg.append('circle')
          .attr('class', 'tagger-delete-button')
          .attr('fill', '#aa4040')
          .attr('cx', delX)
          .attr('cy', delY)
          .attr('r', delR)
          .attr('cursor', 'pointer')
          .on("mousedown", function(d) {
            _this.removeTag(d);
          });

    svg.append('rect')
          .attr('fill', '#ffffff')
          .attr('x', delX-3)
          .attr('y', delY-1.5)
          .attr('width', delR)
          .attr('height', delR/2)
          .attr('rx', 1)
          .attr('cursor', 'pointer')
          .on("mousedown", function(d) {
            _this.removeTag(d);
          });

    // bar
    svg.append('rect')
          .attr('class', 'tagger-slider-bar')
          .attr("width", sliderW)
          .attr("height", sliderH)
          .attr('transform', 'translate(' + sliderX + ', ' + sliderY + ')');

    // thumb and text
    var g = svg.append('g')
          .attr('cursor', 'pointer')
          .attr('transform', function(d) {
            return 'translate(' + (leftX + (d.weight / 100) * (rightX - leftX) ) + ')';
          })
          .call(drag);

    g.append('rect')
          .attr('class', 'tagger-slider-thumb')
          .attr('width', thumbW)
          .attr('height', thumbH)
          .attr('x', - thumbW/2)
          .attr('y', sliderY - thumbH / 2 + sliderH / 2);

    g.append('text')
          .text(function(d) {
            return d.weight;
          })
          .attr('class', 'tagger-slider-num')
          .attr('x', -8)
          .attr('y', sliderY + sliderH/2 + thumbH/2 + 13);


    // tag label
    svg.append('text')
          .text(function(d) { return d.name; } )
          .attr('class', 'tagger-slider-label')
          .attr('transform', 'translate(' + labelX + ', ' + labelY + ')');

    // slider labels
    // 0
    svg.append('text')
          .text('0')
          .attr('class', 'tagger-slider-num')
          .attr('transform', 'translate(' + (sliderX - 14) + ', ' + (sliderY + 7)+ ')');

    // 100
    svg.append('text')
          .text('100')
          .attr('class', 'tagger-slider-num')
          .attr('transform', 'translate(' + (sliderX + sliderW + 3) + ', ' + (sliderY + 7)+ ')');

    function dragmove(d) {

      // calc the x
      var x = Math.max(leftX, Math.min(rightX, d3.event.x));

      d.x = x;
      d3.select(this)
          .attr('transform', 'translate(' + x + ')');

      // calculate the weight
      var tagWeight = Math.round( (x-leftX) / (rightX - leftX) * 100 );

      // d3pie doesn't like 0% data in the chart
      if (tagWeight < 1)
        tagWeight = 1;

      d.weight = tagWeight;
      piechart.updateVals();

      d3.select(this).select('text').text(tagWeight);

    } // dragMove

  }; // end updateTags

  this.addTag = function(tag) {

    // check for too many tags
    var allowedTags = maxTags;
    if ( _this.tags.length >= allowedTags ) {
      alert("Sorry, you can only search on " + allowedTags + " tags.");
      return;
    }

    // check if tag is already in list
    for (i=0;i<_this.tags.length;i++) {
      if (tag.id === this.tags[i].id) {
        alert("You get to search on each tag only once. If you're really interested in " +
          tag.name + " increase it's value on the slider.");
        return;
      }
    }

    var tag = {
      id: tag.id,
      name: tag.name,
      x: sliderX + sliderW / 2,
      y: sliderY - thumbH / 2 + sliderH / 2,
      weight: 50
    };

    _this.tags.push(tag);

    _this.updateTags();

    piechart.updateTagList();

  }; // end addTag

  this.removeTag = function(tag) {

    // remove item from arry (using jQuery because indexOf doesn't work in ie 9 or below)
    _this.tags.splice($.inArray(tag, _this.tags), 1);


    _this.updateTags();
    piechart.updateTagList();
  }; // end removeTag

}