/**
*****************************************************************
* Tagger 
* responsible for the getting and setting of tags and tag weights
*/
function Tagger () {
  _this = this;

  // get the div from the page
  this.div = d3.select('tagger-div');

  this.tags = [];

  // fake data [to be set by user with the sliders]
  this.queryString = "tagWeights=1:40,2:10,3:50";

  // asynchonous call to get the list of possible tags
  queue()
    .defer(d3.json, "/tags")
    .await(this.handleTags);
}

// Tagger.handleTags
// call back when queue retuns list of tags from serer
Tagger.prototype.handleTags = function(error, tags) {

  // handle error
  if (error) {
    return;
  }
  console.log(tags);
  _this.tags = tags;

  // d3.select('#tagger-div')
  //         .selectAll('div')
  //         .data(tags)
  //       .enter().append('div')
  //         .text(function(d) { return d.name; });
  // console.log(d3.select('#slider1'))
  // d3.select('#slider1').call(d3.slider().value(50));

  var tagdata = [{x: 100, y: 20}, {x: 100, y: 80}]

  var drag = d3.behavior.drag()
      .origin(Object)
      .on("drag", dragMove)
      .on('dragend', dragEnd);

  var svg = d3.select('#tagger-div')
      .append('svg')
      .attr("height", 200)
      .attr("widht", 300);

  var g = svg.selectAll('g')
      .data(tagdata)
      .enter()
      .append('g')
      .attr("height", 200)
      .attr("widht", 300)
      .attr('transform', 'translate(20, 10)');

  var rect = g
      .append('rect')
      .attr('y', 17)
      .attr("height", 5)
      .attr("width", 280)
      .attr('fill', '#C0C0C0');

  g.append("circle")
      .attr("r", 20)
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("fill", "#2394F5")
      .call(drag);

  

  function dragMove(d) {
    d3.select(this)
    .attr("opacity", 0.6)
    .attr("cx", d.x = Math.max(0, Math.min(280, d3.event.x)))
    .attr("cy", d.y = 20);
  }

  function dragEnd() {
    d3.select(this)
    .attr('opacity', 1)
  }
};