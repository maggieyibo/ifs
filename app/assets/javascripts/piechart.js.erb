/**
 * Displays the weighted tags in a pie chart
 *
 * @constructor
 */
function Piechart () {
  var _this = this;

  var colors = [  "#7e3838", "#7a387e", "#4d387e", "#38507e", "#386a7e",
                  "#387e6a", "#387e45", "#587e38", "#7c7e38", "#7e6538"
  ];

  // expose the piechart for use in the bubble
  this.pie = null;

  var width = 590,
      height = 600;
  var butX = width/2,
      butY = 252,
      butR = 80;

  // create the svg to draw in
  this.svg = d3.select('#pie-chart')
      .append('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('id', 'pie-svg');

  /**
   * Gets the data from tagger and set it up for pie chart
   */
  var setData = function() {
    var data = [];

    for (var i=0 ; i < tagger.tags.length ; i++ ) {
      data.push({
        label: tagger.tags[i].name,
        value: tagger.tags[i].weight,
        color: colors[i]
      });
    }
    return data;
  }


  var handleClick = function() {

    if (d3.event.defaultPrevented)
      return; // click suppressed

    if (mode == 'search') {
      // only call search if we're in 'search' mode
      bubble.search();
      $('#reader').animate({left:'10px'}, {queue: false, duration: 1000});
    }
  };



  /**
   * Called when just the values of existing tags changes
   * (no animation)
   */
  this.updateVals = function() {
    var data = setData();
    _this.pie.updateProp("effects.load.effect", "none");
    _this.pie.updateProp("data.content", data);

    _this.svg.append('g')
            .attr('class', 'button')
            .attr('cursor', 'pointer')
          .append('circle')
            .on('click',handleClick)
            .attr('cx', butX)
            .attr('cy', butY)
            .attr('r', butR);

  };

  /**
   * Called whenever a tag is added or removed from the list
   * (full animation)
   */
  this.updateTagList = function() {

    // if there are no tags
    if (tagger.tags.length === 0) {
      return;
    }

    var data = setData();

    // if we have already made the pie chart
    if (_this.pie) {

      // switch to animation mode
      _this.pie.updateProp("effects.load.effect", "default");

      // update the data
      _this.pie.updateProp("data.content", data);

      _this.svg.append('g')
            .attr('class', 'button')
            .attr('cursor', 'pointer')
          .append('circle')
            .on('click',handleClick)
            .attr('cx', butX)
            .attr('cy', butY)
            .attr('r', butR);

      _this.svg.append('text')
            .attr('x', width/2-24)
            .attr('y', height/2-40)
            .attr('class', 'pie-search-text')
            .attr('fill', 'white')
            .text('Search');

    } else {

      // create the chart
      _this.pie = new d3pie("#pie-svg", {
        "size": {
          "canvasWidth": width,
          "pieInnerRadius": "66%",
          "pieOuterRadius": "90%"
        },
        data: {
          sortOrder: "null",
          content: data,
        },
        "labels": {
          "outer": {
            "pieDistance": 24
          },
          "inner": {
            "hideWhenLessThanPercentage": 3
          },
          "mainLabel": {
            "color": "#e6e6e6",
            "fontSize": 11
          },
          "percentage": {
            "color": "#d2d2d2",
            "decimalPlaces": 0
          },
          "value": {
            "color": "#797979",
            "fontSize": 11
          },
          "lines": {
            "enabled": true,
            "color": "#ffffff"
          }
        },
        effects: {
          "pullOutSegmentOnClick": {
            "effect": "linear",
            "speed": 400,
            "size": 12
          },
          load: {
            effect: "default"
          }
        },
        "misc": {
          "colors": {
            "segmentStroke": "#747474"
          },
          "gradient": {
            "enabled": true,
            "percentage": 89
          }
        }
      });

    }
  } // end updateTagList
} // end Piechart
