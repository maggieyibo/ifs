/**
*****************************************************************
* Bubble 
* responsible for the force direction graph
* including data and d3
*/
function Bubble () {
  _this = this;
  this.nodes = [];
  this.edges = null;
  this.data = null;
  
  // set a color scale (look at color brewer for better selections)
  // this.color = d3.scale.ordinal()
  //   .range(["#cccccc", "#969696", "#636363", "#252525", "#181818", "#000000"])
  //   .domain([0,1,2,3,4,5]);

  // get the bubble svg from the page
  this.svg = d3.select('#bubble-svg');

  // get the dimensions
  this.w = this.svg.attr("width");
  this.h = this.svg.attr("height");

  this.search();
}

Bubble.prototype.search = function() {
  queue()
    .defer(d3.json, "/search?" + tagger.queryString)
    .await(_this.makeBubble); 
};

// Bubble.makeBubble
// makes the force-direction layout from the given node data
Bubble.prototype.makeBubble = function(error, data) {

  // handle error
  if (error) {
    console.warn(error);
    return;
  }

  var tagNodeRadius = 80;

  // add the tagger (search weights) as the root node
  data.unshift({0:0});
  data[0].weight = 10000;

  // create links from search to the nodes
  var links = [];
  for (i=0;i<data.length-1;i++) {
    links[i] = {"source": 0, "target": i+1 };
    data[i+1].title = "This is a test title."; // <- fake data

    var tmpW = Math.floor( Math.random() * 10000 );
    data[i+1].fakeWeight = Math.floor( tmpW );   // <- fake data
  }

  ///////////////
  // pie chart //
  ///////////////

  var dataset = [ 5, 10, 20, 45, 6, 25 ];

  var outerRadius = tagNodeRadius;
  var innerRadius = 25;
  var arc = d3.svg.arc()
          .innerRadius(innerRadius)
          .outerRadius(outerRadius);
  
  _this.pie = d3.layout.pie();
  
  // Easy colors accessible via a 10-step ordinal scale
  var color = d3.scale.category10();

  
  // Set up groups
  var arcs = _this.svg.selectAll("g.arc")
          .data(_this.pie(dataset))
          .enter()
          .append("g")
          .attr("class", "arc")
          .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");
  
  // Draw arc paths
  arcs.append("path")
      .attr("fill", function(d, i) {
        return color(i);
      })
      .attr("d", arc);
  
  // Labels
  arcs.append("text")
      .attr("transform", function(d) {
        return "translate(" + arc.centroid(d) + ")";
      })
      .attr("text-anchor", "middle")
      .text(function(d) {
        return d.value;
      });

  //////////////////
  // force layout //
  //////////////////
  
  var force = d3.layout.force()
                .nodes(data)
                .links(links)
                .size([_this.w,_this.h])
                .linkDistance(function(d) { return 210-d.target.fakeWeight/100; } )
                .charge(function(d,i) { return i==0 ? -1000 : - d.fakeWeight/3 ; } )
                .gravity(0.3)
                .start();

  // add the edges
  _this.edges = _this.svg.selectAll("line")
                .data(links)
              .enter()
                .append("line")
                .attr('class', 'post-line');


  // add the nodes                 
  _this.nodes = _this.svg.selectAll("g")
                .data(data)
              .enter()
                .append("g")
                .append("circle")
                .attr('class', function (d,i) {return i==0 ? 'tag-node' : 'post-node'} )
                .attr("r", function(d,i) { return i==0 ? tagNodeRadius : 10+d.fakeWeight/400} )
                .call(force.drag);

  //////////
  // text //
  //////////

  // var labels = _this.svg.selectAll("text")
  //               .data(data)
  //               .enter()
  //               .append("text")
  //               .text(function(d) { return d.title; });

  //////////
  // tick //
  //////////
  force.on("tick", function() {

    _this.edges.attr("x1", function(d) { return d.source.x; })
         .attr("y1", function(d) { return d.source.y; })
         .attr("x2", function(d) { return d.target.x; })
         .attr("y2", function(d) { return d.target.y; });

    _this.nodes.attr('transform', function(d,i) { 
      return 'translate(' + d.x + ',' + d.y + ')'; 
    });

    // _this.pie.attr('transform', 'translate(' + 10 + ',' + 10 + ')'); 
    // _this.pie.attr('transform', 'translate(10,10)'); 

    // labels.attr("transform", function(d) {
    //         return "translate(" + d.x + "," + d.y + ")";
    //     });

  // _this.data = data;

  });
};