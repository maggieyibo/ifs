/**
* Responsible for the force direction graph
* including data and d3
*
* @constructor
*/
function Bubble () {
  var _this = this;

  this.nodes = [];
  this.edges = null;
  this.data = null;
  this.arcs = null;

  // colors
  var colors = [  "#7e3838", "#7a387e", "#4d387e", "#38507e", "#386a7e",
                  "#387e6a", "#387e45", "#587e38", "#7c7e38", "#7e6538"
  ];
  // get the bubble svg from the page
  this.svg = d3.select('#bubble-svg');

  // get the dimensions
  this.w = this.svg.attr("width");
  this.h = this.svg.attr("height");

  // send the weighted tags to the server
  this.search = function() {

    if (tagger.tags.length < 1) {
      alert("Please add some tags before searching.");
      return;
    }

    // normalize the tag weights

    // calc the total weight
    var totalWeight = 0;
    for (var i=0 ; i < tagger.tags.length ; i++ ) {
      totalWeight += tagger.tags[i].weight;
    }

    var normalFactor = 100/totalWeight;

    // create the normalized array
    var normalizedTags = [];
    for (var i=0 ; i < tagger.tags.length ; i++ ) {
      normalizedTags.push({
        id: tagger.tags[i].id,
        weight : Math.round(tagger.tags[i].weight * normalFactor)
      });
    }

    // create the querry string
    // in the form: "tagWeights=1:40,2:10,3:50"
    var qStr = "tagWeights=";
    for (var i=0 ; i < normalizedTags.length ; i++ ) {
      qStr += normalizedTags[i].id + ":" + normalizedTags[i].weight + ",";
    }
    qStr = qStr.substring(0, qStr.length - 1);

    // send the data to server search action
    queue()
      .defer(d3.json, "/search?authenticity_token=" + AUTH_TOKEN + "&" + qStr)
      .await(_this.makeBubble);
  };

  // Bubble.makeBubble
  // makes the force-direction layout from the given node data
  this.makeBubble = function(error, data) {

    // handle error
    if (error) {
      console.warn(error);
      return;
    }

    // clear the bubble
    _this.svg.html('');


    //////////
    // data //
    //////////

    var tagNodeRadius = 80;

    // add the tagger (search weights) as the root node
    data.unshift({0:0});
    data[0].weight = 10000;

    // create links from search to the nodes
    var links = [];
    for (i=0;i<data.length-1;i++) {
      links[i] = {"source": 0, "target": i+1 };
    }


    //////////////////
    // close button //
    //////////////////

    var delG = _this.svg.append('g')
        .attr('fill', '#a00')
        .attr('stroke', "#f00")
        .attr('stroke-width', "10")
        .attr('cursor', 'pointer')
        .attr('transform', 'translate(650,0) scale(0.025, 0.025)')
        .on("mousedown", function(d) {
          _this.closeReader();
        });

    // circle
    delG.append('path')
        .attr('d', "m814.29 606.65a314.29 314.29 0 1 1 -628.57 0 314.29 314.29 0 1 1 628.57 0z")
        .attr('transform', "matrix(1.1048 0 0 1.1048 -179.21 -162.53)");

    var innerG = delG.append('g')
        .attr('transform', "matrix(.91837 0 0 .91837 47.587 10.944)")
        .attr('stroke', "#fff")
        .attr('stroke-linecap', "round")
        .attr('stroke-width', "133.87")
        .attr('fill', "none");

    innerG.append('path')
        .attr('d', 'm176.51 362.87 356.13 356.13');

    innerG.append('path')
        .attr('d', 'm532.64 362.87-356.13 356.13');


    //////////////////
    // force layout //
    //////////////////

    var force = d3.layout.force()
                  .nodes(data)
                  .links(links)
                  .size([_this.w,_this.h])
                  .linkDistance(function(d) { return 210-d.target.score/100; } )
                  .charge(function(d,i) { return i==0 ? -1000 : - d.score ; } )
                  .gravity(0.3)
                  .start();


    // add the edges
    _this.edges = _this.svg.selectAll("line")
                  .data(links)
                .enter()
                  .append("line")
                  .attr('class', 'post-line');


    ///////////////
    // pie chart //
    ///////////////


    // console.log(piechart.pie.element);

    // _this.svg.append(piechart.pie.element);

    var dataset = [];
    for (var i = 0 ; i < tagger.tags.length ; i++) {
      dataset[i] = tagger.tags[i].weight;
    }

    var outerRadius = tagNodeRadius;
    var innerRadius = 0;
    var arc = d3.svg.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius);

    var pie = d3.layout.pie();

    // Easy colors accessible via a 10-step ordinal scale
    // var color = d3.scale.category20b();


    // Set up groups
    _this.arcs = _this.svg.selectAll("g.arc")
            .data(pie(dataset))
            .enter()
            .append("g")
            .attr("class", "arc")
            .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")");

    // Draw arc paths
    _this.arcs.append("path")
        .attr("fill", function(d, i) {
          return colors[i];
        })
        .attr("d", arc);


    // Labels
    _this.arcs.append("text")
        .attr("transform", function(d) {
          return "translate(" + arc.centroid(d) + ")";
        })
        .attr("text-anchor", "middle")
        .attr('fill', 'white')
        .text(function(d,i) {
          return tagger.tags[i].name;
        });


    ///////////
    // nodes //
    ///////////

    _this.nodes = _this.svg.selectAll("circle")
                  .data(data)
                .enter()
                  .append("circle")
                  .attr('class', function (d,i) {return i==0 ? 'tag-node' : 'post-node'} )
                  .attr("r", function (d,i) { return i==0 ? tagNodeRadius : 10+d.score/100} )
                  .attr('fill',function (d,i) {
                    if (i > 0) {
                      return colors[Math.floor(Math.random() * 10)];
                    } else {
                      return null;
                    }
                  })
                  .on("mouseover", function(d) {

                    d3.select('#post-title')
                      .text(d.post_title);

                    d3.select('#post-body')
                      .text(d.post_body);

                  })
                  .call(force.drag);

    //////////
    // text //
    //////////
    var labels = _this.svg.selectAll("text")
                  .data(data)
                  .enter()
                  .append("g");


    labels.append("text")
      .each(function (d) {

        if (d.score > 2000) {
          var arr = d.post_title.split(" ");

          if (arr != undefined) {
            for (i = 0; i < arr.length; i++) {
              d3.select(this).append("tspan")
                  .text(arr[i])
                  .attr("dy", i ? "1.2em" : 0)
                  .attr("x", 0)
                  .attr("text-anchor", "middle")
                  .attr('fill', 'white');
            }
          }
        }
      });


    //////////
    // tick //
    //////////
    force.on("tick", function() {

      // edges
      _this.edges.attr("x1", function(d) { return d.source.x; })
           .attr("y1", function(d) { return d.source.y; })
           .attr("x2", function(d) { return d.target.x; })
           .attr("y2", function(d) { return d.target.y; });

      // nodes
      _this.nodes.attr('transform', function(d,i) {
        if (i==0) {
          // move the pie chart along with the root node
          _this.arcs.attr('transform', 'translate(' + d.x + ',' + d.y + ')');
        }
        return 'translate(' + d.x + ',' + d.y + ')';
      });

      // text
      labels.attr("transform", function(d) {
              return "translate(" + d.x + "," + (d.y-24) + ")";
          });

    });
  };

  this.closeReader = function() {
    $('#reader').animate({left:'1600px'}, {queue: false, duration: 1000});
  };

}



