/**
* Tagger 
* responsible for the getting and setting of tags and tag weights
*/
function Tagger () {

  _this = this;
  this.test = "test";
  this.tags = null;

  // slider:
  // d3.slider().value(50).orientation("vertical");

  // asynchonous call to get the list of possible tags
  queue()
    .defer(d3.json, "/tags")
    .await(this.handleTags);
}


// Tagger.handleTags
// call back when queue retuns tags from serer
Tagger.prototype.handleTags = function(error, tags) {

  // handle error
  if (error) {
    return;
  }

  _this.tags = tags;
};


var tagger = new Tagger();

/**
* Bubble 
* responsible for the force direction graph
* including data and d3
*/
function Bubble () {
  _this = this;
  
  // set a color scale (look at color brewer for better selections)
  this.color = d3.scale.ordinal()
    .range(["#cccccc", "#969696", "#636363", "#252525", "#181818", "#000000"])
    .domain([0,1,2,3,4,5]);

  // get the svg from the page
  this.svg = d3.select(document.getElementById('bubble-svg'));

  // set the dimensions
  this.w = this.svg.attr("width");
  this.h = this.svg.attr("height");

  // fake query string
  this.qString = "tagWeights=1:40,2:10,3:50";

  queue()
    .defer(d3.json, "/search?" + this.qString)
    .await(this.makeBubble); 
}

// Bubble.makeBubble
// makes the force-direction layout from the given node data
Bubble.prototype.makeBubble = function(error, nodes) {

  // handle error
  if (error) {
    return;
  }

  // create links from search to the nodes
  var links = [];
  for (i=0;i<nodes.length-1;i++) {
    links[i] = {"source": 0, "target": i+1 };
  }

  // create the d3 force layout
  var force = d3.layout.force()
                .nodes(nodes)
                .links(links)
                .size([_this.w,_this.h])
                .linkDistance([150])
                .charge([-1000])
                .gravity(0.3)
                .start();

  // draw the nodes                 
  var nodes = _this.svg.selectAll("circle")
                .data(nodes)
                .enter()
                .append("circle")
                .attr("r", 20)
                .attr("opacity", 0.5)
                .style("fill", function(d,i) { return _this.color(i); })
                .call(force.drag);

  // draw the edges
  var edges = _this.svg.selectAll("line")
                .data(links)
                .enter()
                .append("line")
                .style("stroke", "#ccc")
                .style("stroke-width", 1)
                .attr("marker-end", "url(#end)");

  // animate the bubble
  force.on("tick", function() {
               edges.attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });
               nodes.attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; })
              ;});
};

var bubble = new Bubble();